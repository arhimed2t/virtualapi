package VirtualAPI;

use strict;
use warnings;
use Data::Dumper;
use HTTP::Server::Simple::CGI;
use base qw(HTTP::Server::Simple::CGI);

$Data::Dumper::Terse = 1;

sub _new {
    my ($class, %params) = @_;

    my $self = {};
    $self->{$_} = $params{$_} for keys %params;

    bless $self => $class;

    return $self;
}

sub _run {
    my $self = shift;

    my $port = $self->{'port'} || 8080;
    my $background = $self->{'background'};

    # Handle routes and methods
    if (ref $self->{'urls'} eq 'ARRAY') {
        no strict 'refs';
        for my $url (@{$self->{'urls'}}) {
            if (ref $url ne 'HASH') {
                die "Wrong VirtualAPI method format!";
            }
            *{__PACKAGE__ . '::' . $url->{'route'}} = sub {
                my $cgi = shift;
                return if ! ref $cgi;

                my @header = ();
                if (ref $url->{'header'} eq 'ARRAY') {
                    @header = @{$url->{'header'}};
                }
                else {
                    push @header, $url->{'header'};
                }

                print(
                    $cgi->header(@header),
                    $cgi->start_html($url->{'start_html'}),
                    $cgi->h1($url->{'h1'}),
                    $cgi->body($url->{'body'}),
                    $cgi->end_html($url->{'end_html'}),
                );
            };
        }
    }

    my @urls = map { $_->{'route'} } @{$self->{'urls'}};
    print "Available routes are:\n", Dumper \@urls;

    my $server = __PACKAGE__->new($port);
    if ($background) {
        my $pid = $server->background();
        print "Use 'kill $pid' to stop server.\n";
    }
    else {
        $server->run();
    }
}

sub handle_request {
    my ($self, $cgi) = @_;

    my $path = $cgi->path_info();
    $path =~ s/\///;
    no strict 'refs';
    my $handler;
    if (*{__PACKAGE__ . '::' . $path}{CODE}) { # Handle url only if specified sub was generated by VirtualAPI
        $handler = \&{$path};
    }

    if (ref $handler eq 'CODE') {
        print "HTTP/1.0 200 OK\r\n";
        $handler->($cgi);
    }
    else {
        print "HTTP/1.0 404 Not found\r\n";
        print(
            $cgi->header(),
            $cgi->start_html('Not found'),
            $cgi->h1('Not found'),
            $cgi->end_html(),
        );
    }
}

1;
